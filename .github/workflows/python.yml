name: Python

on:
  pull_request:

jobs:
  build_and_test:
    name: Check everything builds & tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # Lowest and highest, no version specified so that 
        # new releases get automatically tested against
        version: [{torch: torch==1.10, python: "3.8"}, {torch: torch, python: "3.10"}]
    defaults:
      run:
        working-directory: ./bindings/python
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: "bindings/python"

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.version.python }}
          architecture: "x64"

      - name: Lint with RustFmt
        run: cargo fmt -- --check

      - name: Lint with Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Audit
        run: cargo audit -D warnings

      - name: Install
        run: |
          pip install -U pip
          pip install .[numpy,tensorflow,paddlepaddle]
          pip install ${{ matrix.version.torch }}

      - name: Install (jax, flax)
        if: matrix.os != 'windows-latest'
        run: |
          pip install .[jax]
        shell: bash

      - name: Check style
        run: |
          pip install .[quality]
          black --check --line-length 119 --target-version py35 py_src/safetensors tests

      - name: Run tests
        run: |
          cargo test
          pip install .[testing]
          pytest -sv tests/

  test_s390x_big_endian:
    runs-on: ubuntu-latest
    name: Test bigendian - S390X
    steps:
      - uses: actions/checkout@v2

      - name: Upgrade libssl
        run: sudo apt-get install -y libssl-dev

      - name: Pull images
        run: |
          docker pull multiarch/qemu-user-static
      - name: Install QEMU
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker pull --platform linux/s390x s390x/python
          docker buildx create --use --driver=docker-container


      - name: Run test build
        run: |
          docker build --platform linux/s390x . -t s390x-safetensors -f Dockerfile.s390x.test
      - name: Run test build
        uses: docker/build-push-action@v4
        with:
          push: true
          cache-from: type=registry,mode=max
          cache-to: type=registry,mode=max
